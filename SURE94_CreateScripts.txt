
1. ProductGroups table
-- Table: products_sch.product_groups
 DROP TABLE IF EXISTS products_sch.product_groups;

CREATE TABLE IF NOT EXISTS products_sch.product_groups
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    group_code character varying(1000) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT productgroup_pkey PRIMARY KEY (id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS products_sch.product_groups
    OWNER to postgres;
-- Index: group_code_idx

-- DROP INDEX IF EXISTS products_sch.group_code_idx;

CREATE INDEX IF NOT EXISTS group_code_idx
    ON products_sch.product_groups USING btree
    (group_code COLLATE pg_catalog."default" ASC NULLS LAST)
    TABLESPACE pg_default;


2.Products Table
-- Table: products_sch.products

-- DROP TABLE IF EXISTS products_sch.products;

CREATE TABLE IF NOT EXISTS products_sch.products
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    code character varying(1000) COLLATE pg_catalog."default" NOT NULL,
    productgroupid integer NOT NULL,
    description character varying(2000) COLLATE pg_catalog."default" NOT NULL,
    servcode character varying(1000) COLLATE pg_catalog."default" NOT NULL,
    typecode character varying(1000) COLLATE pg_catalog."default" NOT NULL,
    pkg boolean NOT NULL,
    CONSTRAINT products_pkey PRIMARY KEY (id),
    CONSTRAINT fk_productgroupid FOREIGN KEY (productgroupid)
        REFERENCES products_sch.product_groups (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
        NOT VALID
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS products_sch.products
    OWNER to postgres;
-- Index: fki_fk_productgroupid

DROP INDEX IF EXISTS products_sch.fki_fk_productgroupid;

CREATE INDEX IF NOT EXISTS fki_fk_productgroupid
    ON products_sch.products USING btree
    (productgroupid ASC NULLS LAST)
    TABLESPACE pg_default;